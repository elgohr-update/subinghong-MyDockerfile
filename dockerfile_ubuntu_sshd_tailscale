FROM       ubuntu:20.04
#MAINTAINER sbh

ENV LANG=en_US.UTF-8 LC_ALL=en_US.UTF-8 LANGUAGE=en_US.UTF-8 \
    TAILSCALE_KEY=${TAILSCALE_KEY} \
    TAILSCALE_HOSTNAME=${TAILSCALE_HOSTNAME} \
    GOST_VER=2.11.1 GOST_METHOD=chacha20 GOST_PASSWORD=ss123456 GOST_PORT=8081

RUN apt-get update
RUN apt-get install -y openssh-server vim zip unzip git inetutils-ping curl ncat
RUN mkdir /var/run/sshd

RUN echo 'root:rootpw' |chpasswd
#RUN useradd -m alpine  && echo "alpine:alpine" | /usr/sbin/chpasswd  && adduser alpine sudo
RUN sed -ri 's/UsePAM yes/#UsePAM yes/g' /etc/ssh/sshd_config
RUN echo "PermitRootLogin yes" >> /etc/ssh/sshd_config
RUN echo "PasswordAuthentication yes" >> /etc/ssh/sshd_config
RUN mkdir /root/.ssh

#install tailscale
RUN apt-get install -y curl gnupg gnupg2 gnupg1
RUN curl https://pkgs.tailscale.com/stable/ubuntu/bionic.gpg | apt-key add -
RUN curl https://pkgs.tailscale.com/stable/ubuntu/bionic.list | tee /etc/apt/sources.list.d/tailscale.list
RUN apt-get update
RUN apt-get install -y tailscale

RUN rm -rf /tmp/tailscaled
RUN mkdir -p /tmp/tailscaled
RUN rm -rf /var/run/tailscale
RUN mkdir -p /var/run/tailscale

RUN echo "#!/bin/bash" > start.sh
RUN chmod +x /start.sh

RUN echo "sh -c 'echo root:\${ROOT_PASSWORD:-rootpw} | chpasswd'" >> start.sh

#install nginx
RUN apt-get install -y nginx
RUN echo "nginx" >> start.sh

#add nginx gost proxy config
RUN mkdir -p /etc/nginx/sites-enabled/
RUN echo "" > /etc/nginx/sites-enabled/default
RUN mkdir -p /etc/nginx/conf.d/
RUN echo "map \$http_upgrade \$connection_upgrade {" > /etc/nginx/conf.d/default.conf
RUN echo "   default upgrade;" >> /etc/nginx/conf.d/default.conf
RUN echo "  '' close;" >> /etc/nginx/conf.d/default.conf
RUN echo "}" >> /etc/nginx/conf.d/default.conf
RUN echo "server {" >> /etc/nginx/conf.d/default.conf
RUN echo "  listen     80 default_server;" >> /etc/nginx/conf.d/default.conf
RUN echo "  listen     [::]:80 default_server;" >> /etc/nginx/conf.d/default.conf
RUN echo "  server_name  localhost;" >> /etc/nginx/conf.d/default.conf
RUN echo "  location / {" >> /etc/nginx/conf.d/default.conf
RUN echo "    root   /var/www/html;" >> /etc/nginx/conf.d/default.conf
RUN echo "    index  index.html index.htm index.nginx-debian.html;">>  /etc/nginx/conf.d/default.conf
RUN echo "  }" >> /etc/nginx/conf.d/default.conf
RUN echo "  location /gost/ {" >> /etc/nginx/conf.d/default.conf
RUN echo "    proxy_pass http://127.0.0.1:${GOST_PORT}/;" >> /etc/nginx/conf.d/default.conf
RUN echo "    proxy_set_header Host \$host;" >> /etc/nginx/conf.d/default.conf
RUN echo "    proxy_http_version 1.1;" >> /etc/nginx/conf.d/default.conf
RUN echo "    proxy_set_header Upgrade \$http_upgrade;" >> /etc/nginx/conf.d/default.conf
RUN echo "    proxy_set_header Connection \"upgrade\";" >> /etc/nginx/conf.d/default.conf
RUN echo "  }" >> /etc/nginx/conf.d/default.conf
RUN echo "  location /vsc/ {" >> /etc/nginx/conf.d/default.conf
RUN echo "    proxy_pass http://127.0.0.1:8443/;" >> /etc/nginx/conf.d/default.conf
RUN echo "    proxy_set_header Host \$host;" >> /etc/nginx/conf.d/default.conf
RUN echo "    proxy_http_version 1.1;" >> /etc/nginx/conf.d/default.conf
RUN echo "    proxy_set_header Upgrade \$http_upgrade;" >> /etc/nginx/conf.d/default.conf
RUN echo "    proxy_set_header Connection \"upgrade\";" >> /etc/nginx/conf.d/default.conf
RUN echo "  }" >> /etc/nginx/conf.d/default.conf
RUN echo "}" >> /etc/nginx/conf.d/default.conf

#install gost proxy
RUN curl -sL https://github.com/xiaokaixuan/gost-heroku/releases/download/v${GOST_VER}/gost_${GOST_VER}_linux_amd64.tar.gz | tar --no-same-owner -zx \
    && mv gost_${GOST_VER}_linux_amd64 gost && chmod a+x gost/gost
RUN echo "nohup /gost/gost -L=ss+mws://\$GOST_METHOD:\$GOST_PASSWORD@:\$GOST_PORT & > nohup_gost.out" >> start.sh

#install code-server
RUN curl -fOL https://github.com/coder/code-server/releases/download/v4.4.0/code-server-4.4.0-linux-amd64.tar.gz
RUN tar --no-same-owner -xzvf code-server-4.4.0-linux-amd64.tar.gz
RUN rm code-server-4.4.0-linux-amd64.tar.gz
RUN echo "if [ -d code-server-4.4.0-linux-amd64 ]; then" >> start.sh
RUN echo "  cd code-server-4.4.0-linux-amd64" >> start.sh
RUN echo "  mkdir -p /mydata/vsc_user_data" >> start.sh
RUN echo "  if [ \$VSC_ENABLE ]; then" >> start.sh
RUN echo "  export PASSWORD=\${VSC_PASSWORD:-vscpw} && nohup ./bin/code-server --config vsc_config.yaml --bind-addr 0.0.0.0:8443 --auth password --user-data-dir /mydata/vsc_user_data & > nohup_code-server.out & echo $! > code-server.pid" >> start.sh
RUN echo "  fi" >> start.sh
RUN echo "fi" >> start.sh

RUN echo "nohup tailscaled --tun=userspace-networking --socks5-server=localhost:1055 --socket=/var/run/tailscale/tailscaled.sock --port 41641 &" >> /start.sh
RUN echo "tailscale up --auth-key=\${TAILSCALE_KEY} --hostname=\${TAILSCALE_HOSTNAME}" >> start.sh


RUN echo "/usr/sbin/sshd -D" >> start.sh

RUN echo "if [ -f /mydata/start_ext.sh ]; then . /mydata/start_ext.sh ; fi" >> start.sh


RUN apt-get clean && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

EXPOSE 80

ENTRYPOINT [ "/start.sh" ]
